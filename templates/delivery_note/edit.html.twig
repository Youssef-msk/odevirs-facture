{% extends 'base.html.twig' %}
   {% block title %}
{% if app.current_route != "app_delivery_note_new" %}
Modification/Consultation bon sortie
{% else %}
    Ajout bon sortie
{% endif %}
   {% endblock %}

{% block body %}
    {{ form_start(form,{'attr': {'class': 'saveForm','id': 'saveForm'}}) }}
    <style>
        .ms-res-ctn {
            z-index: 9999 !important;
        }
        table {
            overflow: visible !important;
        }
        td, th {
            overflow: visible;
        }

        .table-responsive {
            overflow-x: visible !important;
        }
    </style>
    <div class="content-page">
        <div class="container-fluid">
            <div class="row">
                <div class="col-lg-12">
                    <div class="d-flex flex-wrap align-items-center justify-content-between mb-3">
                        <div class="d-flex align-items-center justify-content-between">
                            <nav aria-label="breadcrumb">
                                <ol class="breadcrumb p-0 mb-0">
                                    <li class="breadcrumb-item"><a href="{{ path('app_delivery_note_index') }}">Bons de sortie</a></li>
                                    <li class="breadcrumb-item active" aria-current="page">
                                        {% if app.current_route != "app_delivery_note_new" %}
                                            Modification/Consultation bon sortie
                                        {% else %}
                                            Ajout bon sortie
                                        {% endif %}
                                    </li>
                                </ol>
                            </nav>
                        </div>
                    </div>
                </div>


            </div>
            <div class="card">
                <div class="d-flex justify-content-between align-items-end p-1">
                    <h5 class="font-weight-bold"></h5>
                    <button type="button" class="btn btn-secondary btn-sm" data-toggle="modal" data-target=".modal-add-customer">
                        <svg xmlns="http://www.w3.org/2000/svg" class="mr-1" width="20" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v6m3-3H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        Ajouter un nouveau client
                    </button>

                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3 mb-3">
                            <label  class="form-label font-weight-bold text-muted text-uppercase">Référence :</label>
                            {{ form_widget(form.reference,{'attr': {'class': 'form-control','readonly':'readonly'}}) }}
                        </div>
                        <div class="col-md-3 mb-3">
                            <label  class="form-label font-weight-bold text-muted text-uppercase">Client :</label>
                            {{ form_widget(form.customer,{'attr': {'class': 'form-select form-control choicesjsSelect2'}}) }}
                        </div>
                        <div class="col-md-3 mb-3">
                            <label  class="form-label font-weight-bold text-muted text-uppercase">Mode paiement :</label>
                            {{ form_widget(form.paymentMode,{'attr': {'class': 'form-select form-control'}}) }}
                        </div>
                        <div class="col-md-3 mb-3 hidden" id="paymentReference">
                            <label  class="form-label font-weight-bold text-muted text-uppercase">N° (chèque/effet) :</label>
                            {{ form_widget(form.paymentReference,{'attr': {'class': 'form-select form-control'}}) }}
                        </div>
                        <div class="col-md-3 mb-3">
                            <label for="Text6" class="form-label font-weight-bold text-muted text-uppercase">Date :</label>
                            <input type="date" name="deliveryNoteDate" class="form-control" value="{{ currentDate is defined and currentDate  ? currentDate :deliveryNote.createdAt|date('Y-m-d') }}">
                        </div>
                        <div class="col-md-3 mb-4">
                            <label for="Text8" class="form-label font-weight-bold text-muted text-uppercase">Commentaire :</label>
                            {{ form_widget(form.comment,{'attr': {'class': 'form-control','placeholder':'Commentaire ...'}}) }}
                        </div>
                    </div>

                    <div class="d-flex flex-wrap justify-content-between align-items-center p-4">
                        <div class="flex align-items-start flex-column">
                            <h6></h6>
                            <p class="mb-0 my-2" style="color: red"></p>
                        </div>
                        <div>
                            <button class="btn btn-primary px-4" type="submit">
                                <svg xmlns="http://www.w3.org/2000/svg" class="mr-1" width="20" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M10.125 2.25h-4.5c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125v-9M10.125 2.25h.375a9 9 0 019 9v.375M10.125 2.25A3.375 3.375 0 0113.5 5.625v1.5c0 .621.504 1.125 1.125 1.125h1.5a3.375 3.375 0 013.375 3.375M9 15l2.25 2.25L15 12" />
                                </svg>
                                Sauvegarder
                            </button>
                        </div>
                    </div>
                </div>
                {{ form_widget(form._token) }}
            </div>

            {% if app.current_route != "app_delivery_note_new" %}
                <div class="card">
                    <div class="card-body p-0">
                        <ul class="list-group list-group-flush">
                            <li class="d-flex justify-content-between align-items-center p-3">
                                <h5 class="font-weight-bold">Liste des produits</h5>
                            </li>
                            <li class="list-group-item p-0">
                            </li>
                            <li class="list-group-item p-0">
                                <div class="table-responsive">
                                    <table class="table data-table-without-options mb-0" id="salesProducts">
                                        <thead class="table-color-heading">
                                        <tr class="text-light">
                                            <th scope="col" style="min-width: 500px">
                                                <label class="text-muted m-0" >Produit</label>
                                            </th>
                                            <th scope="col">
                                                <label class="text-muted mb-0" >Quantity</label>
                                            </th>
                                            <th scope="col" class="text-left">
                                                <label class="text-muted mb-0" style="min-width:100px;">PU HT (DH)</label>
                                            </th>
                                            <th scope="col" class="text-left" style="min-width:100px;">
                                                <label class="text-muted mb-0" >Taxe (DH)</label>
                                            </th>
                                            <th scope="col" class="text-left" style="min-width:100px;">
                                                <label class="text-muted mb-0" >PU TTC (DH)</label>
                                            </th>
                                            <th scope="col" class="text-left" style="min-width:100px;">
                                                <label class="text-muted mb-0" >PT TTC (DH)</label>
                                            </th>
                                            <th scope="col" class="text-right">
                                                <span class="text-muted" >Action</span>
                                            </th>
                                        </tr>
                                        </thead>
                                        <tbody id="delivery_noteProductsBody">
                                        {% for deliveryNoteProduct in deliveryNoteProducts %}
                                            <tr class="white-space-no-wrap odd productRow{{ deliveryNoteProduct.product.id }}"  data-productRow="{{ deliveryNoteProduct.product.id }}">
                                                <td class=""  style="min-width: 500px">
                                                    <div class="active-project-1 d-flex align-items-center mt-0 ">
                                                        <div class="h-avatar is-medium">
                                                            <img class="avatar rounded" name="dataDeliveryNoteSalesProducts[{{ deliveryNoteProduct.product.id }}][picture]" onerror="this.onerror=null;this.src='{{ asset('data/images/products/default.png') }}';"  alt="" src="{{ asset('data/images/products/'~deliveryNoteProduct.product.picture) }}">
                                                        </div>
                                                        <div class="data-content" style="min-width: 400px;">
                                                            <div>
                                                                <input type="text" id="selectProducts{{ deliveryNoteProduct.product.id }}" name="dataDeliveryNoteSalesProducts[{{ deliveryNoteProduct.product.id }}][idProduct]"  class="form-select form-control selectedProductItems">
                                                            </div>
                                                            <p class="m-0 mt-1">
                                                                <input type="text" readonly name="dataDeliveryNoteSalesProducts[{{ deliveryNoteProduct.product.id }}][brand]" required="required" maxlength="255" class="mb-0 form-control form-control-sm" placeholder="Marque" value="{{ deliveryNoteProduct.product.brand }}">
                                                            </p>
                                                            <p class="m-0 mt-1">
                                                                <input type="text" readonly  name="dataDeliveryNoteSalesProducts[{{ deliveryNoteProduct.product.id }}][ref]" required="required" maxlength="255" class="mb-0 form-control form-control-sm" placeholder="reference" value="{{ deliveryNoteProduct.product.ref }}">
                                                            </p>
                                                            <input type="hidden" name="dataDeliveryNoteSalesProducts[{{ deliveryNoteProduct.product.id }}][id]" value="new">
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>
                                                    <input type="number" onchange="calculateQuantityTrigger('{{ deliveryNoteProduct.product.id }}')" onkeyup="calculateQuantityTrigger('{{ deliveryNoteProduct.product.id }}')" onkeydown="calculateQuantityTrigger('{{ deliveryNoteProduct.product.id }}')"  name="dataDeliveryNoteSalesProducts[{{ deliveryNoteProduct.product.id }}][quantity]" required="required" class="form-control form-control-sm" placeholder="Quantity" value="{{ deliveryNoteProduct.quantity }}">
                                                </td>
                                                <td>
                                                    <input readonly type="text" inputmode="decimal" step="0.01" required="required" name="dataDeliveryNoteSalesProducts[{{ deliveryNoteProduct.product.id }}][priceHt]" class="form-control form-control-sm" value="{{ deliveryNoteProduct.priceHt }}">
                                                </td>
                                                <td>
                                                    <input readonly type="text" inputmode="decimal" step="0.01" required="required"  name="dataDeliveryNoteSalesProducts[{{ deliveryNoteProduct.product.id }}][taxe]" class="form-control form-control-sm"   value="{{ deliveryNoteProduct.taxe }}">
                                                </td>
                                                <td>
                                                    <input  onchange="calculateQuantityTrigger('{{ deliveryNoteProduct.product.id }}')" onkeyup="calculateQuantityTrigger('{{ deliveryNoteProduct.product.id }}')" onkeydown="calculateQuantityTrigger('{{ deliveryNoteProduct.product.id }}')" type="text" id="price{{ deliveryNoteProduct.product.id }}" inputmode="decimal" step="0.01" required="required" name="dataDeliveryNoteSalesProducts[{{ deliveryNoteProduct.product.id }}][priceTtc]" class="form-control form-control-sm products_price"  value="{{ deliveryNoteProduct.priceTtc }}">
                                                </td>
                                                <td class="text-left">
                                                    <input  type="text" readonly inputmode="decimal" step="0.01" required="required" name="dataDeliveryNoteSalesProducts[{{ deliveryNoteProduct.product.id }}][priceTotalTtc]" class="form-control form-control-sm sumPriceTotalTtc" value="{{ deliveryNoteProduct.priceTotalTtc }}">
                                                </td>
                                                <td>
                                                    <div class="d-flex justify-content-end align-items-center">
                                                        <a class="badge bg-danger " href="#" onclick="deleteProductRow('{{ deliveryNoteProduct.product.id }}')" data-toggle="tooltip" data-placement="top" title="" data-original-title="Supprimer" data-href="#">
                                                            <svg xmlns="http://www.w3.org/2000/svg" width="20" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                            </svg>
                                                        </a>
                                                    </div>
                                                </td>
                                            </tr>
                                        {% endfor %}
                                        </tbody>
                                    </table>
                                </div>
                            </li>
                            <li class="list-group-item">
                                <div class="d-flex justify-content-end mb-2">
                                    <button class="btn btn-secondary btn-sm addNewProductButton" type="button">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="20" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.5" stroke="currentColor" class="mr-1">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
                                        </svg>
                                        Ajouter un produit
                                    </button>
                                </div>
                                <div class="d-flex justify-content-end mb-2">
                                    TOTAL HT: <p class="ml-2 mb-0" id="sumPriceTotalHtLabel">00,00</p>
                                    <input type="hidden" name="dataDeliveryNoteSalesProductsAmounts[sumPriceTotalHtLabel]" class="sumPriceTotalHtLabel" value="0">
                                </div>
                                <div class="d-flex justify-content-end mb-2">
                                    TVA : <p class="ml-2 mb-0" id="sumTotalTaxeLabel">00,00</p>
                                    <input type="hidden" name="dataDeliveryNoteSalesProductsAmounts[sumTotalTaxeLabel]" class="sumTotalTaxeLabel" value="0">
                                </div>
                                <div class="d-flex justify-content-end mb-2">
                                    Montant NET TTC (MAD) : <p class="ml-2 mb-0 font-weight-bold" id="sumPriceTotalTtcLabel">00,00</p>
                                    <input type="hidden" name="dataDeliveryNoteSalesProductsAmounts[sumPriceTotalTtcLabel]" class="sumPriceTotalTtcLabel" value="0">
                                </div>
                            </li>
                            <div class="d-flex flex-wrap justify-content-between align-items-center p-4">
                                <div class="flex align-items-start flex-column">
                                    <h6>Notes</h6>
                                    <p class="mb-0 my-2" style="color: red">Une fois que vous avez apporté les modifications nécessaires aux lignes de l'article,<br> n'oubliez pas de cliquer sur le bouton "Enregistrer" pour les appliquer.</p>
                                </div>
                                <div>
                                    <button class="btn btn-secondary px-4" disabled>
                                        <svg xmlns="http://www.w3.org/2000/svg" class="mr-1" width="20" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5" />
                                        </svg>
                                        Imprimer
                                    </button>
                                    <button class="btn btn-primary px-4" type="submit">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="mr-1" width="20" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" d="M10.125 2.25h-4.5c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125v-9M10.125 2.25h.375a9 9 0 019 9v.375M10.125 2.25A3.375 3.375 0 0113.5 5.625v1.5c0 .621.504 1.125 1.125 1.125h1.5a3.375 3.375 0 013.375 3.375M9 15l2.25 2.25L15 12" />
                                        </svg>
                                        Sauvegarder
                                    </button>
                                </div>
                            </div>
                        </ul>
                    </div>
                </div>
            {% endif %}
        </div>

    </div>

    {{ form_end(form, {'render_rest': false}) }}

    <div class="modal fade modal-add-customer" tabindex="-1" role="dialog"  aria-hidden="true">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Ajout nouveau client</h5>
                    <button type="button" class="close button-modal-add-customer" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="saleNewCustomer" method="post">
                        <div class="form-group">
                            <label for="company">Raison sociale:</label>
                            <input type="text" class="form-control form-control-sm" name="newCustomer[company]" id="company">
                        </div>
                        <div class="form-group">
                            <label for="ice">ICE:</label>
                            <input type="text" class="form-control form-control-sm" name="newCustomer[ice]" id="ice">
                        </div>
                        <div class="form-group">
                            <label for="adresse">Adresse:</label>
                            <input type="text" class="form-control form-control-sm" name="newCustomer[adresse]" id="adresse">
                        </div>
                        <div class="form-group">
                            <label for="mail">Téléphone:</label>
                            <input type="text" class="form-control form-control-sm" name="newCustomer[tel]" id="tel">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" data-dismiss="modal">Annuler</button>
                    <button type="button" class="btn btn-secondary" id="addNewCutomer">Sauvegarder</button>
                </div>
            </div>
        </div>
    </div>

    <table  style="display: none">
        <tbody class="newProductTemplate">
        <tr class="white-space-no-wrap odd productRowuniqueLineId"  data-productRow="uniqueLineId">
            <td class=""  style="min-width: 500px">
                <div class="active-project-1 d-flex align-items-center mt-0 ">
                    <div class="h-avatar is-medium">
                        <img class="avatar rounded" name="dataDeliveryNoteSalesProducts[uniqueLineId][picture]" onerror="this.onerror=null;this.src='{{ asset('data/images/products/default.png') }}';"  alt="" src="">
                    </div>
                    <div class="data-content" style="min-width: 400px;">
                        <div>
                            <input type="text" id="selectProductsuniqueLineId" name="dataDeliveryNoteSalesProducts[uniqueLineId][idProduct]"  class="form-select form-control selectedProductItems">
                        </div>
                        <p class="m-0 mt-1">
                            <input type="text" readonly name="dataDeliveryNoteSalesProducts[uniqueLineId][brand]" required="required" maxlength="255" class="mb-0 form-control form-control-sm" placeholder="Marque" value="0">
                        </p>
                        <p class="m-0 mt-1">
                            <input type="text" readonly  name="dataDeliveryNoteSalesProducts[uniqueLineId][ref]" required="required" maxlength="255" class="mb-0 form-control form-control-sm" placeholder="reference" value="0">
                        </p>
                        <input type="hidden" name="dataDeliveryNoteSalesProducts[uniqueLineId][id]" value="new">
                    </div>
                </div>
            </td>
            <td>
                <input type="number" onchange="calculateQuantityTrigger('uniqueLineId')" onkeyup="calculateQuantityTrigger('uniqueLineId')" onkeydown="calculateQuantityTrigger('uniqueLineId')"  name="dataDeliveryNoteSalesProducts[uniqueLineId][quantity]" required="required" class="form-control form-control-sm" placeholder="Quantity" value="1">
            </td>
            <td>
                <input readonly type="text" inputmode="decimal" step="0.01" required="required" name="dataDeliveryNoteSalesProducts[uniqueLineId][priceHt]" class="form-control form-control-sm" value="0">
            </td>
            <td>
                <input readonly type="text" inputmode="decimal" step="0.01" required="required"  name="dataDeliveryNoteSalesProducts[uniqueLineId][taxe]" class="form-control form-control-sm"   value="0">
            </td>
            <td>
                <input  onchange="calculateQuantityTrigger('uniqueLineId')" onkeyup="calculateQuantityTrigger('uniqueLineId')" onkeydown="calculateQuantityTrigger('uniqueLineId')" type="text" id="priceuniqueLineId" inputmode="decimal" step="0.01" required="required" name="dataDeliveryNoteSalesProducts[uniqueLineId][priceTtc]" class="form-control form-control-sm products_price"  value="0">
            </td>
            <td class="text-left">
                <input  type="text" readonly inputmode="decimal" step="0.01" required="required" name="dataDeliveryNoteSalesProducts[uniqueLineId][priceTotalTtc]" class="form-control form-control-sm sumPriceTotalTtc" value="">
            </td>
            <td>
                <div class="d-flex justify-content-end align-items-center">
                    <a class="badge bg-danger " href="#" onclick="deleteProductRow('uniqueLineId')" data-toggle="tooltip" data-placement="top" title="" data-original-title="Supprimer" data-href="#">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                    </a>
                </div>
            </td>
        </tr>
        </tbody>
    </table>
{% endblock %}

{% block javascriptfooter %}
    <script>
        function onErrorEvent(img){
            img.onerror=null;img.src="{{ app.request.schemeAndHttpHost }}/data/images/products/default.png";
        }
        function deleteProductRow(productId){
            var elementProductRow = "productRow"+productId+"";
            var $productRow = $("." + elementProductRow + "");
            $productRow.remove();

            calculateSumFooterElements();

        }

        function calculateQuantityTrigger(productId){
            var elementnewProductQuantity = "dataDeliveryNoteSalesProducts["+productId+"][quantity]";
            var $newProductQuantity = $("[name='" + elementnewProductQuantity + "']");
            var quantity = $newProductQuantity.val();

            var elementnewProductPriceTtc = "dataDeliveryNoteSalesProducts["+productId+"][priceTtc]";
            var $newProductPriceTtc = $("[name='" + elementnewProductPriceTtc + "']");
            var priceTtc = $newProductPriceTtc.val();

            var elementnewProductPriceTotalTtc = "dataDeliveryNoteSalesProducts["+productId+"][priceTotalTtc]";
            var $newProductPriceTotalTtc = $("[name='" + elementnewProductPriceTotalTtc + "']");
            $newProductPriceTotalTtc.val((parseFloat(priceTtc.replace(/,/g, ".")) * parseInt(quantity)).toFixed(2).toString().replace(".",","));

            var newPriceTTc =  (parseFloat($newProductPriceTtc.val().replace(/,/g, ".")));
            var newRate  =  (newPriceTTc / 1.2) * 0.2;
            var newPriceHt = (newPriceTTc - newRate);

            var elementnewpriceHt = "dataDeliveryNoteSalesProducts["+productId+"][priceHt]";
            var $newProductelementnewpriceHt = $("[name='" + elementnewpriceHt + "']");
            $newProductelementnewpriceHt.val(newPriceHt.toFixed(2).toString().replace(".",","));

            calculateSumFooterElements();

        }

        function calculateSumFooterElements() {

            var sumPriceTotalTtc = 0;
            $('.sumPriceTotalTtc').each(function() {
                var value = parseFloat($(this).val().replace(/,/g, "."));
                if (!isNaN(value)) {
                    sumPriceTotalTtc += value;
                }
            });

            if (sumPriceTotalTtc > 0){
                $("#sumPriceTotalTtcLabel").html(sumPriceTotalTtc.toFixed(2).toString().replace(".",","));
                $(".sumPriceTotalTtcLabel").val(sumPriceTotalTtc.toFixed(2).toString().replace(".",","));

                var newPriceTTc =  (parseFloat($(".sumPriceTotalTtcLabel").val().replace(/,/g, ".")));
                var newRate  =  (newPriceTTc / 1.2) * 0.2;
                var newPriceHt = (newPriceTTc - newRate);

                $("#sumPriceTotalHtLabel").html(newPriceHt.toFixed(2).toString().replace(".",","));
                $(".sumPriceTotalHtLabel").val(newPriceHt.toFixed(2).toString().replace(".",","));

                $("#sumTotalTaxeLabel").html(newRate.toFixed(2).toString().replace(".",","));
                $(".sumTotalTaxeLabel").val(newRate.toFixed(2).toString().replace(".",","));
            }else {
                $("#sumPriceTotalTtcLabel").html("00,00");
                $(".sumPriceTotalTtcLabel").val("00,00");

                $("#sumPriceTotalHtLabel").html("00,00");
                $(".sumPriceTotalHtLabel").val("00,00");

                $("#sumTotalTaxeLabel").html("00,00");
                $(".sumTotalTaxeLabel").val("00,00");
            }
        }

        $(document).ready(function() {


            $(".choicesjsSelect2").select2({
                placeholder: 'Séléctionner un client',
                allowClear: true
            });

            $('#addNewCutomer').click(function() {
                var form = $('#saleNewCustomer');
                $.ajax({
                    type:"POST",
                    url : "{{ path('app_customers_sales_add') }}",
                    data: form.serialize(),
                    success : function(response) {
                        if(response == "nok_rs"){
                            swal("Raison sociale obligatoire", "", "error");
                        }else{
                            swal("Client ajouté", "", "success");
                            // Create the DOM option that is pre-selected by default
                            var newState = new Option(response.company, response.id, true, true);
                            // Append it to the select
                            $(".choicesjsSelect2").append(newState).trigger('change');
                            $('#saleNewCustomer').trigger("reset");
                            $('.button-modal-add-customer').click();
                        }
                    },
                    error: function() {
                        alert('le champs Raison sociale est obligatoire');
                    }
                });
            });

            $('#delivery_note_paymentMode').change(function () {
                if ($(this).val() === '1' || $(this).val() === '2') {
                    $('#paymentReference').removeClass('hidden');
                } else {
                    $('#paymentReference').addClass('hidden');
                    $('#delivery_note_paymentReference').val('');
                }

                if ($(this).val() === '3' || $(this).val() === '3') {
                    $('#delivery_note_echeance').addClass('hidden');
                } else {
                    $('#delivery_note_echeance').removeClass('hidden');
                }
            });

            $(document).on('click', '.addNewProductButton', function(){
                var uniqueLineId = generateUniqueId();
                var alreadySelectedProducts = "?alreadySelectedProducts=0";
                $('.selectedProductItems').each(function() {
                    var value = $(this).val();
                    alreadySelectedProducts += "," + value ;
                });

                var pathSerachProducts = "{{ path('app_products_search') }}" + alreadySelectedProducts;
                var defaultPictureProducts = "{{ asset('data/images/products/default.png') }}";

                var row = $(".newProductTemplate").html().replaceAll('uniqueLineId', uniqueLineId); // Get the parent row

                var destinationTableBody = $('#delivery_noteProductsBody');  // Target the destination table's tbody
                destinationTableBody.append(row); // Append the row to the destination table

                var uniqueLineId{{ "searchProducts" }} = $('#selectProducts'+uniqueLineId).magicSuggest({
                    data: pathSerachProducts,
                    valueField: 'id',
                    placeholder: "Rechercher",
                    displayField: 'name',
                    allowFreeEntries: false,
                    maxSelection: 1,
                    renderTo: 'body',
                    renderer: function(data){
                        return '<div class="active-project-1 d-flex align-items-center mt-0"><div class="h-avatar is-medium">' +
                            '<img class="avatar rounded" alt="DESIGNATION" onerror="onErrorEvent(this)" src="{{ app.request.schemeAndHttpHost }}/data/images/products/' + data.picture + '" />' +
                            '</div><div class="data-content"><div><span class="font-weight-bold">' + data.name +
                            '</span></div><p class="m-0 mt-1">REF:' + data.ref +
                            '</p></div></div>';
                    }
                });


                $(uniqueLineId{{ "searchProducts" }}).on('selectionchange', function(event, selection) {
                    var selectedProductData = this.getSelection()[0];
                    try {
                        var elementnewpriceHt = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][priceHt]";
                        var $newProductelementnewpriceHt = $("[name='" + elementnewpriceHt + "']");
                        $newProductelementnewpriceHt.val(selectedProductData.priceHt);

                        var elementtaxe = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][taxe]";
                        var $newProductelementtaxe = $("[name='" + elementtaxe + "']");
                        $newProductelementtaxe.val(selectedProductData.rate);

                        var elementprice = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][priceTtc]";
                        var $newProductelementprice = $("[name='" + elementprice + "']");
                        $newProductelementprice.val(selectedProductData.price);

                        var elementprice = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][priceTotalTtc]";
                        var $newProductelementprice = $("[name='" + elementprice + "']");
                        $newProductelementprice.val(selectedProductData.price);

                        var elementbrand = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][brand]";
                        var $newProductelementbrand = $("[name='" + elementbrand + "']");
                        $newProductelementbrand.val(selectedProductData.brand);

                        var elementref = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][ref]";
                        var $newProductelementref = $("[name='" + elementref + "']");
                        $newProductelementref.val(selectedProductData.ref);

                        var elementid = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][id]";
                        var $newProductelementid = $("[name='" + elementid + "']");
                        $newProductelementid.val(selectedProductData.ref);

                        var elementid = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][id]";
                        var $newProductelementid = $("[name='" + elementid + "']");
                        $newProductelementid.val(selectedProductData.id);

                        var elementpicture = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][picture]";
                        var $newProductelementpicture = $("[name='" + elementpicture + "']");
                        $newProductelementpicture.attr("src", "{{ app.request.schemeAndHttpHost }}/data/images/products/"+selectedProductData.picture);

                        calculateSumFooterElements();

                    }catch (e){
                        var elementnewpriceHt = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][priceHt]";
                        var $newProductelementnewpriceHt = $("[name='" + elementnewpriceHt + "']");
                        $newProductelementnewpriceHt.val(0);

                        var elementtaxe = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][taxe]";
                        var $newProductelementtaxe = $("[name='" + elementtaxe + "']");
                        $newProductelementtaxe.val(0);

                        var elementprice = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][priceTtc]";
                        var $newProductelementprice = $("[name='" + elementprice + "']");
                        $newProductelementprice.val(0);

                        var elementprice = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][priceTotalTtc]";
                        var $newProductelementprice = $("[name='" + elementprice + "']");
                        $newProductelementprice.val(0);

                        var elementbrand = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][brand]";
                        var $newProductelementbrand = $("[name='" + elementbrand + "']");
                        $newProductelementbrand.val(0);

                        var elementref = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][ref]";
                        var $newProductelementref = $("[name='" + elementref + "']");
                        $newProductelementref.val(0);

                        var elementid = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][id]";
                        var $newProductelementid = $("[name='" + elementid + "']");
                        $newProductelementid.val(0);

                        var elementid = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][id]";
                        var $newProductelementid = $("[name='" + elementid + "']");
                        $newProductelementid.val(0);

                        var elementpicture = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][picture]";
                        var $newProductelementpicture = $("[name='" + elementpicture + "']");
                        $newProductelementpicture.attr("src", "{{ app.request.schemeAndHttpHost }}/data/images/products/default.png");
                        calculateSumFooterElements();
                        
                    }
                });



            });



            var alreadySelectedProducts = "?alreadySelectedProducts=0";
            $('.selectedProductItems').each(function() {
                var value = $(this).val();
                alreadySelectedProducts += "," + value ;
            });

            var pathSerachProducts = "{{ path('app_products_search') }}" + alreadySelectedProducts;

            {% if deliveryNoteProducts is defined %}
            {% for deliveryNoteProduct in deliveryNoteProducts %}
            var {{  "searchProducts" ~ deliveryNoteProduct.product.id }} = $('#selectProducts{{ deliveryNoteProduct.product.id }}').magicSuggest({
                data: pathSerachProducts,
                valueField: 'id',
                placeholder: "Rechercher",
                displayField: 'name',
                allowFreeEntries: false,
                maxSelection: 1,
                renderTo: 'body',
                renderer: function(data){
                    return '<div class="active-project-1 d-flex align-items-center mt-0"><div class="h-avatar is-medium">' +
                        '<img class="avatar rounded" alt="DESIGNATION" onerror="onErrorEvent(this)" src="{{ app.request.schemeAndHttpHost }}/data/images/products/' + data.picture + '" />' +
                        '</div><div class="data-content"><div><span class="font-weight-bold">' + data.name +
                        '</span></div><p class="m-0 mt-1">REF:' + data.ref +
                        '</p></div></div>';
                }
            });

            $({{ "searchProducts" ~ deliveryNoteProduct.product.id }}).on('selectionchange', function(event, selection) {
                var selectedProductData = this.getSelection()[0];
                try {
                    var elementnewpriceHt = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][priceHt]";
                    var $newProductelementnewpriceHt = $("[name='" + elementnewpriceHt + "']");
                    $newProductelementnewpriceHt.val(selectedProductData.priceHt);

                    var elementtaxe = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][taxe]";
                    var $newProductelementtaxe = $("[name='" + elementtaxe + "']");
                    $newProductelementtaxe.val(selectedProductData.rate);

                    var elementprice = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][priceTtc]";
                    var $newProductelementprice = $("[name='" + elementprice + "']");
                    $newProductelementprice.val(selectedProductData.price);

                    var elementprice = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][priceTotalTtc]";
                    var $newProductelementprice = $("[name='" + elementprice + "']");
                    $newProductelementprice.val(selectedProductData.price);

                    var elementbrand = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][brand]";
                    var $newProductelementbrand = $("[name='" + elementbrand + "']");
                    $newProductelementbrand.val(selectedProductData.brand);

                    var elementref = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][ref]";
                    var $newProductelementref = $("[name='" + elementref + "']");
                    $newProductelementref.val(selectedProductData.ref);

                    var elementid = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][id]";
                    var $newProductelementid = $("[name='" + elementid + "']");
                    $newProductelementid.val(selectedProductData.ref);

                    var elementid = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][id]";
                    var $newProductelementid = $("[name='" + elementid + "']");
                    $newProductelementid.val(selectedProductData.id);

                    var elementpicture = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][picture]";
                    var $newProductelementpicture = $("[name='" + elementpicture + "']");
                    $newProductelementpicture.attr("src", "{{ app.request.schemeAndHttpHost }}/data/images/products/"+selectedProductData.picture);
                }catch (e){
                    try {
                        var elementnewpriceHt = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][priceHt]";
                        var $newProductelementnewpriceHt = $("[name='" + elementnewpriceHt + "']");
                        $newProductelementnewpriceHt.val(0);

                        var elementtaxe = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][taxe]";
                        var $newProductelementtaxe = $("[name='" + elementtaxe + "']");
                        $newProductelementtaxe.val(0);

                        var elementprice = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][priceTtc]";
                        var $newProductelementprice = $("[name='" + elementprice + "']");
                        $newProductelementprice.val(0);

                        var elementprice = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][priceTotalTtc]";
                        var $newProductelementprice = $("[name='" + elementprice + "']");
                        $newProductelementprice.val(0);

                        var elementbrand = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][brand]";
                        var $newProductelementbrand = $("[name='" + elementbrand + "']");
                        $newProductelementbrand.val(0);

                        var elementref = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][ref]";
                        var $newProductelementref = $("[name='" + elementref + "']");
                        $newProductelementref.val(0);

                        var elementid = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][id]";
                        var $newProductelementid = $("[name='" + elementid + "']");
                        $newProductelementid.val(0);

                        var elementid = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][id]";
                        var $newProductelementid = $("[name='" + elementid + "']");
                        $newProductelementid.val(0);

                        var elementpicture = "dataDeliveryNoteSalesProducts["+uniqueLineId+"][picture]";
                        var $newProductelementpicture = $("[name='" + elementpicture + "']");
                        $newProductelementpicture.attr("src", "{{ app.request.schemeAndHttpHost }}/data/images/products/default.png");
                    }catch (ex){

                    }

                }
            });

              {{  "searchProducts" ~ deliveryNoteProduct.product.id }}.setValue(["{{ deliveryNoteProduct.product.nameCommerciale }}"]);
            {% endfor %}
            {% endif %}
            function generateUniqueId() {
                // Get current timestamp (milliseconds since epoch)
                const timestamp = Date.now();
                // Generate a random number
                const randomNumber = Math.floor(Math.random() * 1000000); // Adjust range as needed
                // Combine them to create a unique ID
                return `temp_${timestamp}_${randomNumber}`;
            }



            $('#delivery_note_paymentMode').change();
            calculateSumFooterElements();

        });
    </script>
{% endblock  %}
